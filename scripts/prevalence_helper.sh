#!/bin/bash

###
# Usage: prevalence_helper.sh
# Parameters:
#      -c = Commit changes to the auto-update-prevalence branch and submit pull request
#      -b = Use current branch instead of checking out a fresh one
# See README.md for install/setup instructions for this script

# Set script to stop if any command fails or an undefined variable is accessed
set -euo pipefail

if ! command -v gh &> /dev/null; then
  echo "GitHub CLI could not be found, please install from https://cli.github.com/"
  exit
fi

# Set defaults
COMMIT_AND_PULL_REQUEST=0
STAY_ON_CURRENT_BRANCH=0

while getopts "cb" OPTION; do
    case $OPTION in
    c)
        COMMIT_AND_PULL_REQUEST=1
        ;;
    b)
        STAY_ON_CURRENT_BRANCH=1
        ;;
    *)
        ;;
    esac
done

# Load the API key
KEYSTORE=".secure-keys"
source "$KEYSTORE"
if [ ! -f "$KEYSTORE" ]; then
  echo "$KEYSTORE does not exist. Please obtain an API key from https://apidocs.covidactnow.org/"
  exit
fi

if [[ STAY_ON_CURRENT_BRANCH != 1 ]]; then
  echo "Creating auto-update-prevalence branch based on main"
  # Update local branch
  git checkout main
  git pull

  # Delete the remote branch. It usually doesn't exist unless the script failed last time.
  git push origin --delete auto-update-prevalence &> /dev/null || true

  # Delete the local branch & create new one
  git branch -D auto-update-prevalence
  git checkout -b auto-update-prevalence
fi


# Activate the local virtual env.
source .venv/bin/activate
CAN_API_KEY=$CAN_API_KEY python3 update_prevalence.py

# Needed in order to fix some lint errors that come up from the JSON generated by update_prevalence.py
yarn fix


if [[ COMMIT_AND_PULL_REQUEST == 1 ]]; then
  echo "Committing the files and submitting an auto-merge pull request"

  # Only proceed if files have been changed
  # TODO(blanchardjeremy): Could use better error checking
  if [[ `git status --porcelain` ]]; then
    TODAY=`date +%Y-%m-%d`
    git add -A
    git commit -am "Automatic prevalence update $TODAY"
    git push
    # Use the GitHub CLI to create a pull request and save the url
    PR_URL=`gh pr create --fill`
    echo "Pull request URL: $PR_URL"
    if [[ ! $PR_URL = "" ]]; then
      # Set the pull request to auto merge
      gh pr merge --auto --delete-branch --squash "$PR_URL"
    else
      echo "ERROR: No pull request URL generated"
      exit 2
    fi
  else
    echo "ERROR: No changes to add to git commit, earlier script must have failed"
    exit 2
  fi
fi
